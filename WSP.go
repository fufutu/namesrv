// generated by wsp, DO NOT EDIT.

package main

import "net/http"
import "time"
import "github.com/simplejia/namesrv/controller/admin"
import "github.com/simplejia/namesrv/filter"
import "github.com/simplejia/namesrv/controller"

func init() {
	http.HandleFunc("/admin/relation/create", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(admin.Relation)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/admin/relation/create"}); !ok {
				return
			}
		}()
		c.Create(w, r)
	})

	http.HandleFunc("/admin/relation/delete", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(admin.Relation)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/admin/relation/delete"}); !ok {
				return
			}
		}()
		c.Delete(w, r)
	})

	http.HandleFunc("/conf/get", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(controller.Conf)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/conf/get"}); !ok {
				return
			}
		}()
		c.Get(w, r)
	})

	http.HandleFunc("/relation/getsFromIp", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(controller.Relation)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/relation/getsFromIp"}); !ok {
				return
			}
		}()
		c.GetsFromIp(w, r)
	})

	http.HandleFunc("/relation/getsFromName", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(controller.Relation)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/relation/getsFromName"}); !ok {
				return
			}
		}()
		c.GetsFromName(w, r)
	})

	http.HandleFunc("/relation/reportOff", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(controller.Relation)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/relation/reportOff"}); !ok {
				return
			}
		}()
		c.ReportOff(w, r)
	})

}